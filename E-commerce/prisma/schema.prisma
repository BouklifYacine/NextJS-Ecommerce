datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String          @id @default(cuid())
  name             String?         @unique
  email            String?         @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             Roles           @default(utilisateur)
  resetToken       String?
  resetTokenExpiry DateTime?
  adresses         Adresse[]
  commandes        Commande[]
  avis             Avis[]
   abonnement       Abonnement?
  plan             Plan            @default(free)
  clientId         String?         @unique
  favoris          Favori[]
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}
model Abonnement {
  id                 String         @id @default(cuid())
  userId             String         @unique
  plan               Plan
  periode            PlanAbonnement
  datedebut          DateTime       @default(now())
  datefin            DateTime       @updatedAt
  user               User           @relation(fields: [userId], references: [id])
  economiesRealisees Float          @default(0)
  codeAnniversaire   String?
}

enum Roles {
  Admin
  utilisateur
}

enum Plan {
  free
  pro
}

enum PlanAbonnement {
  mois
  année
}

enum Categorie {
  ELECTRONIQUE
  INFORMATIQUE
  GAMING
  MOBILIER
}

model Adresse {
  id                String     @id @default(cuid())
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rue               String
  ville             Int
  codePostal        String
  pays              String
  adressePrincipale Boolean    @default(false)
  commandes         Commande[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Produit {
  id               String            @id @default(cuid())
  nom              String
  description      String            @db.Text
  prix             Float
  prixPromo         Float?
  quantiteStock    Int               @default(0)
  enPromotion      Boolean           @default(false)
  categorie        Categorie // Utilise directement l'enum
  images           ImageProduit[]
  avis             Avis[]
  produitCommandes CommandeProduit[]
  favoris          Favori[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ImageProduit {
  id         String   @id @default(cuid())
  produitId  String
  produit    Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  urlImage   String // URL vers Cloudinary
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Avis {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  produitId    String
  produit      Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  note         Int
  commentaire  String?  @db.Text
  achatVerifie Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Produit favori
model Favori {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  produitId String
  produit   Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, produitId])
}

model Commande {
  id             String            @id @default(cuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  numeroCommande String            @unique
  produits       CommandeProduit[]
  statut         StatutCommande    @default(EN_ATTENTE)

  // Dates des changements de statut pour l'historique simplifié
  dateCreation   DateTime  @default(now())
  dateTraitement DateTime? // Quand statut passe à EN_TRAITEMENT
  dateExpedition DateTime? // Quand statut passe à EXPEDIE
  dateLivraison  DateTime? // Quand statut passe à LIVRE
  dateAnnulation DateTime? // Quand statut passe à ANNULE

  total                Float
  tva                  Float
  fraisLivraison       Float
  adresseId            String?
  adresseLivraison     Adresse?      @relation(fields: [adresseId], references: [id])
  methodeLivraison     ModeLivraison @default(STANDARD)
  annulable            Boolean       @default(true)
  updatedAt            DateTime      @updatedAt
  dateLivraisonEstimee DateTime?
}

// Produit dans une commande
model CommandeProduit {
  id           String   @id @default(cuid())
  commandeId   String
  commande     Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  produitId    String
  produit      Produit  @relation(fields: [produitId], references: [id])
  quantite     Int
  prixUnitaire Float
  prixTotal    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum StatutCommande {
  EN_ATTENTE
  EN_TRAITEMENT
  EXPEDIE
  LIVRE
  ANNULE
}

enum ModeLivraison {
  STANDARD
  EXPRESS
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
